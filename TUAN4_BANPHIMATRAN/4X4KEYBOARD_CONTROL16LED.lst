CCS PCH C Compiler, Version 5.101, 43599               14-Sep-23 14:17

               Filename:   D:\TTVXL\TUAN4_BANPHIMATRAN\4X4KEYBOARD_CONTROL16LED.lst

               ROM used:   688 bytes (2%)
                           Largest free fragment is 32080
               RAM used:   29 (1%) at main() level
                           35 (2%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0000:  GOTO   0220
.................... #include <D:\TTVXL_TH\tv_pickit2_shift_1.c>
.................... #ifndef    __tv_pickit2_shift_1_c__
.................... #define    __tv_pickit2_shift_1_c__
.................... #include<tv_pickit2_shift_1.h>
.................... #ifndef    __TV_PICKIT2_SHIFT_1_H__
.................... #define    __TV_PICKIT2_SHIFT_1_H__
.................... 
.................... #include    <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 3F,7F
0016:  DATA BF,FF
*
00E6:  CLRF   00
00E8:  CLRF   01
00EA:  MOVF   1E,W
00EC:  BCF    FD8.0
00EE:  BTFSC  1F.0
00F0:  ADDWF  00,F
00F2:  RRCF   00,F
00F4:  RRCF   01,F
00F6:  BTFSC  1F.1
00F8:  ADDWF  00,F
00FA:  RRCF   00,F
00FC:  RRCF   01,F
00FE:  BTFSC  1F.2
0100:  ADDWF  00,F
0102:  RRCF   00,F
0104:  RRCF   01,F
0106:  BTFSC  1F.3
0108:  ADDWF  00,F
010A:  RRCF   00,F
010C:  RRCF   01,F
010E:  BTFSC  1F.4
0110:  ADDWF  00,F
0112:  RRCF   00,F
0114:  RRCF   01,F
0116:  BTFSC  1F.5
0118:  ADDWF  00,F
011A:  RRCF   00,F
011C:  RRCF   01,F
011E:  BTFSC  1F.6
0120:  ADDWF  00,F
0122:  RRCF   00,F
0124:  RRCF   01,F
0126:  BTFSC  1F.7
0128:  ADDWF  00,F
012A:  RRCF   00,F
012C:  RRCF   01,F
012E:  GOTO   019C (RETURN)
.................... 
.................... #list
.................... 
.................... #device     adc=10
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use        delay(clock=20000000)
*
01A8:  CLRF   FEA
01AA:  MOVLW  1B
01AC:  MOVWF  FE9
01AE:  MOVF   FEF,W
01B0:  BZ    01CC
01B2:  MOVLW  06
01B4:  MOVWF  01
01B6:  CLRF   00
01B8:  DECFSZ 00,F
01BA:  BRA    01B8
01BC:  DECFSZ 01,F
01BE:  BRA    01B6
01C0:  MOVLW  7B
01C2:  MOVWF  00
01C4:  DECFSZ 00,F
01C6:  BRA    01C4
01C8:  DECFSZ FEF,F
01CA:  BRA    01B2
01CC:  GOTO   01E2 (RETURN)
.................... //#use        i2c(master,slow,sda=pin_b0,scl=pin_b1)
.................... #use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... //nut nhan:
.................... #define  bt0     pin_b5
.................... #define  bt1     pin_b4
.................... #define  bt2     pin_b3
.................... #define  bt3     pin_b2
.................... 
.................... #define  on      bt0       //dk led don, motor
.................... #define  off     bt1
.................... #define  inv     bt2
.................... 
.................... #define  up      bt0    //dk led don
.................... #define  dw      bt1
.................... #define  clr     bt2
.................... #define  mod     bt3
.................... 
.................... #define  stop    bt3
.................... 
.................... #define  on1     bt0     
.................... #define  off1    bt1
.................... #define  on2     bt2       
.................... #define  off2    bt3
.................... 
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... #define      ssdo             pin_e2         //chung tat ca
.................... #define      ssck             pin_e0         //chung tat ca
.................... #define      g_all            pin_d0         //a - 4 byte
.................... #define      rck_lcd20x4      pin_d2         //a - 2 byte dao
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte 
.................... #define      rck_32led        pin_d4         //a - 4 byte
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao
.................... #define      rck_4led7doan    pin_d6         //a - 4 byte
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int16 rbdc;
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis
.................... #bit step_motor_in1     = rbdc.1    
.................... #bit step_motor_in2     = rbdc.2
.................... #bit step_motor_in3     = rbdc.3
.................... #bit step_motor_in4     = rbdc.4
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900
.................... #bit buzzer             = rbdc.8    //1=on,0=off
.................... #bit triac_1            = rbdc.9    //1=on,0=off
.................... #bit triac_2            = rbdc.10   //1=on,0=off
.................... #bit relay_1            = rbdc.11   //0=on,1=off
.................... #bit relay_2            = rbdc.12   //0=on,1=off
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... const unsigned char ma7doan[16]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e};
.................... #define     maso0    0xc0
.................... #define     maso1    0xf9
.................... #define     maso2    0xa4
.................... #define     maso3    0xb0
.................... #define     maso4    0x99
.................... #define     maso5    0x92
.................... #define     maso6    0x82
.................... #define     maso7    0xf8
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 102 xuat 1 byte ra thanh ghi dich
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void xuat_1byte(unsigned int8 x)
.................... {
....................    unsigned int8 sb;   
....................    #bit bseri  = x.7
....................    for(sb=0;sb<8;sb++)
*
0018:  CLRF   22
001A:  MOVF   22,W
001C:  SUBLW  07
001E:  BNC   003C
....................       {                                                 
....................          output_bit(ssdo,bseri);    
0020:  BTFSC  21.7
0022:  BRA    0028
0024:  BCF    F8D.2
0026:  BRA    002A
0028:  BSF    F8D.2
002A:  BCF    F96.2
....................          output_low(ssck); output_high(ssck);
002C:  BCF    F96.0
002E:  BCF    F8D.0
0030:  BCF    F96.0
0032:  BSF    F8D.0
....................          x= x<<1;         
0034:  BCF    FD8.0
0036:  RLCF   21,F
0038:  INCF   22,F
003A:  BRA    001A
....................      }
003C:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 301
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 4 byte ra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0)
.................... {     
....................       xuat_1byte(bld3);          
*
01FC:  MOVFF  1D,21
0200:  RCALL  0018
....................       xuat_1byte(bld2);
0202:  MOVFF  1E,21
0206:  RCALL  0018
....................       xuat_1byte(bld1);          
0208:  MOVFF  1F,21
020C:  RCALL  0018
....................       xuat_1byte(bld0);                              
020E:  MOVFF  20,21
0212:  RCALL  0018
....................       output_high(rck_32led);    
0214:  BCF    F95.4
0216:  BSF    F8C.4
....................       output_low(rck_32led);
0218:  BCF    F95.4
021A:  BCF    F8C.4
021C:  GOTO   02AC (RETURN)
....................     
.................... }
.................... //ham 302
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0)
.................... {     
....................      unsigned int8  b3,b2,b1,b0;
....................      b3 = wld1>>8;  b2 = wld1; 
....................      b1 = wld0>>8;  b0 = wld0;
....................      xuat_32led_don_4byte(b3,b2,b1,b0);
.................... }
.................... //ham 303
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 1 double word ra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_1dw(unsigned long long dwld)
.................... {     
....................      unsigned int16  wd1,wd0;
....................      wd1 = dwld>>16;  wd0 = dwld;
....................      xuat_32led_don_2word(wd1,wd0);
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat)
.................... {
....................       unsigned int8   xbitx;   
....................       #bit bserix  = xbitx.0
....................       xbitx = bytexuat;
....................                                             
....................       output_bit(ssdo,bserix);    
....................       output_low(ssck); output_high(ssck);
....................       xbitx= xbitx>>1;   
....................       return(xbitx);  
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 103: xuat 1 word ra thanh ghi dich
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void xuat_1word(unsigned int16 w)
.................... {  
....................    unsigned int8 b1,b0;
....................    b1 = w>>8; b0 = w;
*
003E:  MOVFF  1C,1D
0042:  MOVFF  1B,1E
....................    xuat_1byte(b1);    
0046:  MOVFF  1D,21
004A:  RCALL  0018
....................    xuat_1byte(b0);
004C:  MOVFF  1E,21
0050:  RCALL  0018
0052:  RETURN 0
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 104: xoa cac module 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void xoa_tat_6module()                          
.................... {                                                                                              
....................    xuat_1word(0);                             
0054:  CLRF   1C
0056:  CLRF   1B
0058:  RCALL  003E
....................    xuat_1word(0); 
005A:  CLRF   1C
005C:  CLRF   1B
005E:  RCALL  003E
....................    xuat_1word(0);                             
0060:  CLRF   1C
0062:  CLRF   1B
0064:  RCALL  003E
....................    xuat_1word(0);                                    
0066:  CLRF   1C
0068:  CLRF   1B
006A:  RCALL  003E
....................    
....................    output_high(rck_buzerelay);   
006C:  BCF    F95.3
006E:  BSF    F8C.3
....................    output_low(rck_buzerelay);
0070:  BCF    F95.3
0072:  BCF    F8C.3
....................    
....................    output_high(rck_32led);
0074:  BCF    F95.4
0076:  BSF    F8C.4
....................    output_low(rck_32led); 
0078:  BCF    F95.4
007A:  BCF    F8C.4
....................    
....................    output_high(rck_8ledquet);   
007C:  BCF    F95.5
007E:  BSF    F8C.5
....................    output_low(rck_8ledquet);   
0080:  BCF    F95.5
0082:  BCF    F8C.5
....................                                  
....................    output_high(rck_matranled);          
0084:  BCF    F95.7
0086:  BSF    F8C.7
....................    output_low(rck_matranled);   
0088:  BCF    F95.7
008A:  BCF    F8C.7
....................                            
....................    output_high(rck_lcd20x4);   
008C:  BCF    F95.2
008E:  BSF    F8C.2
....................    output_low(rck_lcd20x4);      
0090:  BCF    F95.2
0092:  BCF    F8C.2
....................                                                                           
....................    xuat_1word(0xffff); 
0094:  SETF   1C
0096:  SETF   1B
0098:  RCALL  003E
....................    xuat_1word(0xffff); 
009A:  SETF   1C
009C:  SETF   1B
009E:  RCALL  003E
....................    output_high(rck_4led7doan);       
00A0:  BCF    F95.6
00A2:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                      
00A4:  BCF    F95.6
00A6:  BCF    F8C.6
00A8:  GOTO   00C4 (RETURN)
.................... }             
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 101
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham khoi tao cac port va ic chot
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void set_up_port_ic_chot()
.................... {     
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                   
00AC:  MOVLW  FF
00AE:  MOVWF  F92
00B0:  MOVLW  3C
00B2:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                               
00B4:  MOVLW  F1
00B6:  MOVWF  F94
00B8:  MOVLW  00
00BA:  MOVWF  F96
....................    set_tris_d(0x00);    
00BC:  MOVWF  F95
....................    output_d(0x00); 
00BE:  CLRF   F95
00C0:  CLRF   F8C
....................    xoa_tat_6module();
00C2:  BRA    0054
....................    port_b_pullups(0xff);          
00C4:  BCF    FF1.7
....................    rbdc=0;               
00C6:  CLRF   05
00C8:  CLRF   04
....................             
....................    setup_adc(adc_clock_div_32);        
00CA:  MOVF   FC0,W
00CC:  ANDLW  C0
00CE:  IORLW  02
00D0:  MOVWF  FC0
00D2:  BSF    FC0.7
00D4:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd); 
00D6:  MOVF   FC1,W
00D8:  ANDLW  C0
00DA:  IORLW  0C
00DC:  MOVWF  FC1
....................    output_low(g_all);        
00DE:  BCF    F95.0
00E0:  BCF    F8C.0
00E2:  GOTO   0262 (RETURN)
.................... }
.................... //ham 104
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740)
.................... {     
....................       xuat_1byte(bl740);   xuat_1byte(bl741);
....................       xuat_1byte(bl742);   xuat_1byte(bl743);       
....................       output_low(rck_4led7doan);   
....................       output_high(rck_4led7doan);
.................... 
.................... }
.................... //ham 404
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740);
.................... }
.................... //ham 403
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740);
.................... }
.................... //ham 402
.................... void xuat_4led_7doan_1so(unsigned int bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740);
.................... }
.................... 
.................... //ham 405
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam)
.................... {         
....................       unsigned int8 ht[4]={0xff,0xff,0xff,0xff},i=0;
....................       do
....................       {
....................           ht[i]= ma7doan[tam%10];
....................           tam/=10;i++;
....................       }
....................       while(tam);
....................       xuat_4led_7doan_4so(ht[3],ht[2],ht[1],ht[0]);
.................... }
.................... 
.................... void  xuat_4led_7doan_2_so (unsigned int8 bh,bl)
.................... {         
....................  xuat_4led_7doan_4so(ma7doan[bh/10],ma7doan[bh%10],ma7doan[bl/10],ma7doan[bl%10]);   
.................... }
.................... 
.................... unsigned int8 lcddata=0; 
.................... unsigned int8 lcdcontrol=0;
.................... unsigned int8 glcddata=0;
.................... unsigned int8 glcdcontrol=0; 
.................... //ham 701
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_glcd_lcd()
.................... {      
....................     xuat_1byte(glcdcontrol);             
....................     xuat_1byte(glcddata);
....................     xuat_1byte(lcdcontrol);       
....................     xuat_1byte(lcddata);      
....................          
....................     output_high(rck_lcd20x4);     
....................     output_low(rck_lcd20x4);
.................... }
.................... //ham 702
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi)
.................... {     
....................     lcdcontrol = ~lcd_signal;
....................     lcddata    = ~lcd_ins_hthi;      
....................     xuat_glcd_lcd();
.................... }
.................... //ham 703
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     glcdcontrol = ~glcd_signal;
....................     glcddata    = ~glcd_ins_hthi;     
....................     xuat_glcd_lcd();
.................... }
.................... //ham 501
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi)
.................... {     
....................       xuat_1byte(~ma);   
....................       xuat_1byte(~so_hthi);
....................       output_high(rck_8ledquet); 
....................       output_low(rck_8ledquet);
.................... }
.................... //ham 502
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_8led_7doan_quet_tat_led()
.................... {
....................    xuat_8led_7doan_quet_1(0xff,0xff);
.................... }
.................... //ham 503
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi led theo thu tu
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe};
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi)
.................... {         
....................       xuat_1byte(~ (ttledquet[thutuled]));   
....................       xuat_1byte(~so_hthi);     
....................       output_high(rck_8ledquet); 
....................       output_low(rck_8ledquet);
.................... }
.................... //ham 504
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned char led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... unsigned int8 tt8led=0;
.................... void hien_thi_8led_7doan_quet()
.................... {     
....................       for(tt8led=0;tt8led<8;tt8led++)
....................          if (led_7dq[tt8led]!=0xff)
....................          {           
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]);
....................             delay_us(100);
....................             xuat_8led_7doan_quet_tat_led();           
....................             }
.................... }
.................... //ham 505
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void hien_thi_8led_7doan_quet_all()
.................... {     
....................       for(tt8led=0;tt8led<8;tt8led++)         
....................          {           
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]);
....................             delay_us(100);
....................             xuat_8led_7doan_quet_tat_led();           
....................             }
.................... }
.................... 
.................... void delay_quet_8led(unsigned int16 dl)
.................... { 
....................       unsigned int8 i;
....................       for (i=0; i<dl;i++)
....................       hien_thi_8led_7doan_quet_all();
.................... } 
.................... 
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x)
.................... {     
....................       led_7dq[0]= ma7doan [x %10];    
....................       led_7dq[1]= ma7doan [x/10%10];
....................       led_7dq[2]= ma7doan [x/100%10];    
....................       led_7dq[3]= ma7doan [x/1000%10];
....................       led_7dq[4]= ma7doan [x/10000%10];
....................       if (led_7dq[4]==maso0) 
....................       {
....................             led_7dq[4]=0xff;
....................             if (led_7dq[3]==maso0) 
....................             {
....................                led_7dq[3]=0xff;
....................                if (led_7dq[2]==maso0) 
....................                {
....................                   led_7dq[2]=0xff;
....................                   if (led_7dq[1]==maso0) 
....................                   {
....................                      led_7dq[1]=0xff;
....................                   }
....................                }
....................             }
....................       }
....................             
.................... }
.................... 
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx         
.................... void xuat_2byte(unsigned int16 x)
.................... {
....................    int8 sbb;
....................    #bit bserix  = x.15
....................    for (sbb=0;sbb<16;sbb++)
....................       {                                                 
....................          output_bit(ssdo,bserix);    
....................          output_low(ssck);         
....................          output_high(ssck);
....................          x= x<<1;         
....................      }
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat ra led ma tran
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {      
....................       xuat_2byte(macot3);
....................       xuat_2byte(macot2);
....................       xuat_2byte(macot1);
....................       xuat_2byte(mahang);     
.................... 
....................       output_high(rck_matranled); 
....................       output_low(rck_matranled);
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat ra led ma tran
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void tat_matranled()
.................... {      
....................       xuat_2byte(0);
....................       xuat_2byte(0);
....................       xuat_2byte(0);
....................       xuat_2byte(0);           
....................       output_high(rck_matranled); output_low(rck_matranled); 
.................... }
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy)
.................... {
....................       int1  btg;
....................       unsigned int8   bx;   
....................       #bit bit4  = bx.4
....................       #bit bit5  = bx.5
....................       #bit bit6  = bx.6
....................       #bit bit7  = bx.7
....................       bx=xzy;
....................       btg=bit4;   bit4=bit7;  bit7=btg;
....................       btg=bit5;   bit5=bit6;  bit6=btg;      
....................       return(bx);  
.................... }
.................... //ham 601
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //module dieu khien relay,triac, buzzer, dong co, sim
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_buzzer_relay()
.................... {     
....................    unsigned int8 rbdc1,rbdc2;
....................       rbdc1=rbdc; rbdc2=rbdc>>8;      
....................       xuat_1byte(rbdc2);      
....................       xuat_1byte(rbdc1);
....................       
....................       output_high(rck_buzerelay);   
....................       output_low(rck_buzerelay);
.................... }
.................... //ham 602
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void buzzer_on()
.................... {    
....................       buzzer=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 603
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void buzzer_off()
.................... {     
....................       buzzer=0;
....................       xuat_buzzer_relay();
.................... }
.................... //ham 604
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_on()
.................... {    
....................       relay_1=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 603
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_off()
.................... {    
....................       relay_1=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 604
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_2_on()
.................... {    
....................       relay_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 607
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_2_off()
.................... {    
....................       relay_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 608
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_relay_2_on()
.................... {    
....................       relay_1=1;  relay_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 609
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_relay_2_off()
.................... {    
....................       relay_1=0;  relay_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 610
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_1_on()
.................... {    
....................       triac_1=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 611
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_1_off()
.................... {    
....................       triac_1=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 612
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_2_on()
.................... {    
....................       triac_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 613
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_2_off()
.................... {    
....................       triac_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... 
.................... void ggmmaa()
.................... {
....................    unsigned int8   x;   
....................    x=ma7doan[1];
.................... }
.................... #endif
....................  
.................... 
.................... //!#include <D:\TTVXL_TH\TV_KIT_KEYPAD_BO138.c>
.................... #include <D:\TTVXL_TH\tv_pickit2_shift_key4x4_138.c>
.................... CONST UNSIGNED CHAR MAQUETKEY[4]= {0x3F,0x7F,0xBF,0xFF};
.................... UNSIGNED INT8  MPT1=0,MPT2=0;  
.................... UNSIGNED INT KEY_NHAN()
.................... {     SIGNED INT8 MAPHIM,HANG,COT;
....................       MAPHIM=HANG=0XFF;
*
0132:  SETF   1C
0134:  MOVFF  1C,1B
....................       FOR(COT=0;COT<4;COT++)
0138:  CLRF   1D
013A:  BTFSC  1D.7
013C:  BRA    0144
013E:  MOVF   1D,W
0140:  SUBLW  03
0142:  BNC   018C
....................             {   
....................                OUTPUT_B(MAQUETKEY[COT]);
0144:  CLRF   03
0146:  MOVF   1D,W
0148:  MOVWF  00
014A:  BTFSC  FE8.7
014C:  DECF   03,F
014E:  RCALL  0004
0150:  CLRF   F93
0152:  MOVWF  F8A
....................                IF         (!INPUT(PIN_B2))      {HANG=3;   BREAK;}
0154:  BSF    F93.2
0156:  BTFSC  F81.2
0158:  BRA    0162
015A:  MOVLW  03
015C:  MOVWF  1C
015E:  BRA    018C
0160:  BRA    0188
....................                ELSE    IF (!INPUT(PIN_B3))      {HANG=2;   BREAK;}
0162:  BSF    F93.3
0164:  BTFSC  F81.3
0166:  BRA    0170
0168:  MOVLW  02
016A:  MOVWF  1C
016C:  BRA    018C
016E:  BRA    0188
....................                ELSE    IF (!INPUT(PIN_B4))      {HANG=1;   BREAK;}
0170:  BSF    F93.4
0172:  BTFSC  F81.4
0174:  BRA    017E
0176:  MOVLW  01
0178:  MOVWF  1C
017A:  BRA    018C
017C:  BRA    0188
....................                ELSE    IF (!INPUT(PIN_B5))      {HANG=0;   BREAK;}
017E:  BSF    F93.5
0180:  BTFSC  F81.5
0182:  BRA    0188
0184:  CLRF   1C
0186:  BRA    018C
0188:  INCF   1D,F
018A:  BRA    013A
....................             }          
....................          IF (HANG!=0XFF)   MAPHIM   = COT*4 + HANG;
018C:  INCFSZ 1C,W
018E:  BRA    0192
0190:  BRA    01A2
0192:  MOVFF  1D,1E
0196:  MOVLW  04
0198:  MOVWF  1F
019A:  BRA    00E6
019C:  MOVF   1C,W
019E:  ADDWF  01,W
01A0:  MOVWF  1B
....................          RETURN(MAPHIM);
01A2:  MOVFF  1B,01
01A6:  RETURN 0
.................... }
.................... UNSIGNED INT KEY_4X4_DW()
.................... {     
....................       MPT1=KEY_NHAN();         
*
01D0:  RCALL  0132
01D2:  MOVFF  01,13
....................       IF (MPT1!=0XFF)   
01D6:  INCFSZ 13,W
01D8:  BRA    01DC
01DA:  BRA    01F4
....................       {  DELAY_MS(1);  
01DC:  MOVLW  01
01DE:  MOVWF  1B
01E0:  BRA    01A8
....................          MPT1=KEY_NHAN();
01E2:  RCALL  0132
01E4:  MOVFF  01,13
....................          DO{MPT2=KEY_NHAN();}
01E8:  RCALL  0132
01EA:  MOVFF  01,14
....................          WHILE (MPT2==MPT1);
01EE:  MOVF   13,W
01F0:  SUBWF  14,W
01F2:  BZ    01E8
....................       }             
....................       RETURN(MPT1);
01F4:  MOVFF  13,01
01F8:  GOTO   026C (RETURN)
.................... }
.................... 
.................... UNSIGNED INT KEY_4X4_UP()
.................... {            
....................       MPT1=KEY_NHAN();
....................       IF (MPT1!=0XFF)   
....................       {  
....................          IF (MPT1!=MPT2)
....................             {
....................                RETURN(MPT1);  //PHIM MOI
....................                MPT2=MPT1;
....................             }
....................          ELSE
....................          {
....................             DELAY_MS(1);
....................             MPT1=KEY_NHAN();
....................             DO
....................             {
....................                MPT2=KEY_NHAN();
....................                }
....................             WHILE (MPT2!=MPT1);
....................                RETURN(MPT1);     //THOAT VI TRUNG MA PHIM DA NHAN
....................                MPT2=MPT1;           
....................          }
....................       }  
....................       ELSE 
....................       {
....................          RETURN(MPT1);  //THOAT VI KHONG NHAN
....................          MPT2=MPT1;
....................       }      
.................... }
.................... 
.................... 
.................... 
.................... //! orginal code :
.................... //!CONST UNSIGNED CHAR MAQUETKEY[4]= {0x3F,0x7F,0xBF,0xFF};
.................... //!UNSIGNED INT8  MPT1=0,MPT2=0;  
.................... //!UNSIGNED INT KEY_NHAN()
.................... //!{     SIGNED INT8 MAPHIM,HANG,COT;
.................... //!      MAPHIM=HANG=0XFF;
.................... //!      FOR(COT=0;COT<4;COT++)
.................... //!            {   
.................... //!               OUTPUT_B(MAQUETKEY[COT]);
.................... //!               IF         (!INPUT(PIN_B2))      {HANG=3;   BREAK;}
.................... //!               ELSE    IF (!INPUT(PIN_B3))      {HANG=2;   BREAK;}
.................... //!               ELSE    IF (!INPUT(PIN_B4))      {HANG=1;   BREAK;}
.................... //!               ELSE    IF (!INPUT(PIN_B5))      {HANG=0;   BREAK;}
.................... //!            }          
.................... //!         IF (HANG!=0XFF)   MAPHIM   = COT*4 + HANG;
.................... //!         RETURN(MAPHIM);
.................... //!}
.................... //!UNSIGNED INT KEY_4X4_DW()
.................... //!{     
.................... //!      MPT1=KEY_NHAN();         
.................... //!      IF (MPT1!=0XFF)   
.................... //!      {  DELAY_MS(1);  
.................... //!         MPT1=KEY_NHAN();
.................... //!         DO{MPT2=KEY_NHAN();}
.................... //!         WHILE (MPT2==MPT1);
.................... //!      }             
.................... //!      RETURN(MPT1);
.................... //!}
.................... //!
.................... //!UNSIGNED INT KEY_4X4_UP()
.................... //!{            
.................... //!      MPT1=KEY_NHAN();
.................... //!      IF (MPT1!=0XFF)   
.................... //!      {  
.................... //!         IF (MPT1!=MPT2)
.................... //!            {
.................... //!               RETURN(MPT1);  //PHIM MOI
.................... //!               MPT2=MPT1;
.................... //!            }
.................... //!         ELSE
.................... //!         {
.................... //!            DELAY_MS(1);
.................... //!            MPT1=KEY_NHAN();
.................... //!            DO
.................... //!            {
.................... //!               MPT2=KEY_NHAN();
.................... //!               }
.................... //!            WHILE (MPT2!=MPT1);
.................... //!               RETURN(MPT1);     //THOAT VI TRUNG MA PHIM DA NHAN
.................... //!               MPT2=MPT1;           
.................... //!         }
.................... //!      }  
.................... //!      ELSE 
.................... //!      {
.................... //!         RETURN(MPT1);  //THOAT VI KHONG NHAN
.................... //!         MPT2=MPT1;
.................... //!      }      
.................... //!}
.................... //!
.................... 
.................... 
.................... unsigned int16 y, led_tam,mp;
.................... void main()
*
0220:  CLRF   FF8
0222:  BCF    FD0.7
0224:  BSF    FB8.3
0226:  MOVLW  08
0228:  MOVWF  FAF
022A:  MOVLW  02
022C:  MOVWF  FB0
022E:  MOVLW  A6
0230:  MOVWF  FAC
0232:  MOVLW  90
0234:  MOVWF  FAB
0236:  CLRF   06
0238:  CLRF   07
023A:  CLRF   08
023C:  CLRF   09
023E:  CLRF   12
0240:  CLRF   13
0242:  CLRF   14
0244:  MOVF   FC1,W
0246:  ANDLW  C0
0248:  IORLW  0F
024A:  MOVWF  FC1
024C:  MOVLW  07
024E:  MOVWF  FB4
0250:  SETF   0A
0252:  SETF   0B
0254:  SETF   0C
0256:  SETF   0D
0258:  SETF   0E
025A:  SETF   0F
025C:  SETF   10
025E:  SETF   11
.................... {
.................... 
....................    set_up_port_ic_chot();
0260:  BRA    00AC
....................    set_tris_b(0x3c);
0262:  MOVLW  3C
0264:  MOVWF  F93
....................    y=0;
0266:  CLRF   16
0268:  CLRF   15
.................... 
....................    while (true)
....................    {
....................       mp=key_4x4_dw();
026A:  BRA    01D0
026C:  CLRF   1A
026E:  MOVFF  01,19
....................       
....................       if (mp!=0xff)
0272:  INCFSZ 19,W
0274:  BRA    027A
0276:  MOVF   1A,F
0278:  BZ    02AC
....................       {
....................          led_tam=0x0001;
027A:  CLRF   18
027C:  MOVLW  01
027E:  MOVWF  17
....................          led_tam=led_tam<<mp;
0280:  MOVF   19,W
0282:  MOVWF  00
0284:  BZ    0290
0286:  BCF    FD8.0
0288:  RLCF   17,F
028A:  RLCF   18,F
028C:  DECFSZ 00,F
028E:  BRA    0286
....................          y=y^led_tam; //xor
0290:  MOVF   17,W
0292:  XORWF  15,F
0294:  MOVF   18,W
0296:  XORWF  16,F
....................          xuat_32led_don_4byte(0,0,y>>8,y);
0298:  MOVFF  16,1B
029C:  CLRF   1C
029E:  CLRF   1D
02A0:  CLRF   1E
02A2:  MOVFF  16,1F
02A6:  MOVFF  15,20
02AA:  BRA    01FC
....................            
....................       }
02AC:  BRA    026A
....................    }
.................... }
.................... 
02AE:  SLEEP 
.................... 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
