CCS PCH C Compiler, Version 5.101, 43599               31-Aug-23 13:45

               Filename:   D:\TTVXL\TUAN2\BAI_304_STD_PST_8LED.lst

               ROM used:   432 bytes (1%)
                           Largest free fragment is 32336
               RAM used:   22 (1%) at main() level
                           27 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0124
.................... #include <D:\TTVXL_TH\tv_pickit2_shift_1.c>
.................... #ifndef    __tv_pickit2_shift_1_c__
.................... #define    __tv_pickit2_shift_1_c__
.................... #include<tv_pickit2_shift_1.h>
.................... #ifndef    __TV_PICKIT2_SHIFT_1_H__
.................... #define    __TV_PICKIT2_SHIFT_1_H__
.................... 
.................... #include    <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
.................... 
.................... #list
.................... 
.................... #device     adc=10
.................... #fuses      nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use        delay(clock=20000000)
*
00FE:  CLRF   FEA
0100:  MOVLW  15
0102:  MOVWF  FE9
0104:  MOVF   FEF,W
0106:  BZ    0122
0108:  MOVLW  06
010A:  MOVWF  01
010C:  CLRF   00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ 01,F
0114:  BRA    010C
0116:  MOVLW  7B
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  DECFSZ FEF,F
0120:  BRA    0108
0122:  RETURN 0
.................... //#use        i2c(master,slow,sda=pin_b0,scl=pin_b1)
.................... #use        rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... //nut nhan:
.................... #define  bt0     pin_b5
.................... #define  bt1     pin_b4
.................... #define  bt2     pin_b3
.................... #define  bt3     pin_b2
.................... 
.................... #define  on      bt0       //dk led don, motor
.................... #define  off     bt1
.................... #define  inv     bt2
.................... 
.................... #define  up      bt0    //dk led don
.................... #define  dw      bt1
.................... #define  clr     bt2
.................... #define  mod     bt3
.................... 
.................... #define  stop    bt3
.................... 
.................... #define  on1     bt0     
.................... #define  off1    bt1
.................... #define  on2     bt2       
.................... #define  off2    bt3
.................... 
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... #define      ssdo             pin_e2         //chung tat ca
.................... #define      ssck             pin_e0         //chung tat ca
.................... #define      g_all            pin_d0         //a - 4 byte
.................... #define      rck_lcd20x4      pin_d2         //a - 2 byte dao
.................... #define      rck_buzerelay    pin_d3     //b - 1 byte 
.................... #define      rck_32led        pin_d4         //a - 4 byte
.................... #define      rck_8ledquet     pin_d5         //b - 2 byte dao
.................... #define      rck_4led7doan    pin_d6         //a - 4 byte
.................... #define      rck_matranled    pin_d7         //b - 3 byte dao
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //khai bao du lieu 16 bit cho module relay, triac, buzzer, dong co
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int16 rbdc;
.................... #bit step_motor_enable  = rbdc.0    //1=ena,0=dis
.................... #bit step_motor_in1     = rbdc.1    
.................... #bit step_motor_in2     = rbdc.2
.................... #bit step_motor_in3     = rbdc.3
.................... #bit step_motor_in4     = rbdc.4
.................... #bit dc_enable          = rbdc.5    //1=ena,0=dis
.................... #bit pwrkey             = rbdc.6    //khoi tao sim900
.................... #bit buzzer             = rbdc.8    //1=on,0=off
.................... #bit triac_1            = rbdc.9    //1=on,0=off
.................... #bit triac_2            = rbdc.10   //1=on,0=off
.................... #bit relay_1            = rbdc.11   //0=on,1=off
.................... #bit relay_2            = rbdc.12   //0=on,1=off
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... const unsigned char ma7doan[16]= {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,
.................... 0x80,0x90,0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e};
.................... #define     maso0    0xc0
.................... #define     maso1    0xf9
.................... #define     maso2    0xa4
.................... #define     maso3    0xb0
.................... #define     maso4    0x99
.................... #define     maso5    0x92
.................... #define     maso6    0x82
.................... #define     maso7    0xf8
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 102 xuat 1 byte ra thanh ghi dich
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void xuat_1byte(unsigned int8 x)
.................... {
....................    unsigned int8 sb;   
....................    #bit bseri  = x.7
....................    for(sb=0;sb<8;sb++)
*
0004:  CLRF   1A
0006:  MOVF   1A,W
0008:  SUBLW  07
000A:  BTFSS  FD8.0
000C:  GOTO   0032
....................       {                                                 
....................          output_bit(ssdo,bseri);    
0010:  BTFSC  19.7
0012:  GOTO   001C
0016:  BCF    F8D.2
0018:  GOTO   001E
001C:  BSF    F8D.2
001E:  BCF    F96.2
....................          output_low(ssck); output_high(ssck);
0020:  BCF    F96.0
0022:  BCF    F8D.0
0024:  BCF    F96.0
0026:  BSF    F8D.0
....................          x= x<<1;         
0028:  BCF    FD8.0
002A:  RLCF   19,F
002C:  INCF   1A,F
002E:  GOTO   0006
....................      }
0032:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 301
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 4 byte ra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_4byte(unsigned int8 bld3,bld2,bld1,bld0)
.................... {     
....................       xuat_1byte(bld3);          
*
00DC:  MOVFF  15,19
00E0:  RCALL  0004
....................       xuat_1byte(bld2);
00E2:  MOVFF  16,19
00E6:  RCALL  0004
....................       xuat_1byte(bld1);          
00E8:  MOVFF  17,19
00EC:  RCALL  0004
....................       xuat_1byte(bld0);                              
00EE:  MOVFF  18,19
00F2:  RCALL  0004
....................       output_high(rck_32led);    
00F4:  BCF    F95.4
00F6:  BSF    F8C.4
....................       output_low(rck_32led);
00F8:  BCF    F95.4
00FA:  BCF    F8C.4
00FC:  RETURN 0
....................     
.................... }
.................... //ham 302
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 word 16 bitra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_2word(unsigned int16 wld1, unsigned int16 wld0)
.................... {     
....................      unsigned int8  b3,b2,b1,b0;
....................      b3 = wld1>>8;  b2 = wld1; 
....................      b1 = wld0>>8;  b0 = wld0;
....................      xuat_32led_don_4byte(b3,b2,b1,b0);
.................... }
.................... //ham 303
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 1 double word ra 32 led don
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_32led_don_1dw(unsigned long long dwld)
.................... {     
....................      unsigned int16  wd1,wd0;
....................      wd1 = dwld>>16;  wd0 = dwld;
....................      xuat_32led_don_2word(wd1,wd0);
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat)
.................... {
....................       unsigned int8   xbitx;   
....................       #bit bserix  = xbitx.0
....................       xbitx = bytexuat;
....................                                             
....................       output_bit(ssdo,bserix);    
....................       output_low(ssck); output_high(ssck);
....................       xbitx= xbitx>>1;   
....................       return(xbitx);  
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 103: xuat 1 word ra thanh ghi dich
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void xuat_1word(unsigned int16 w)
.................... {  
....................    unsigned int8 b1,b0;
....................    b1 = w>>8; b0 = w;
*
0034:  MOVFF  16,17
0038:  MOVFF  15,18
....................    xuat_1byte(b1);    
003C:  MOVFF  17,19
0040:  RCALL  0004
....................    xuat_1byte(b0);
0042:  MOVFF  18,19
0046:  RCALL  0004
0048:  RETURN 0
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 104: xoa cac module 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void xoa_tat_6module()                          
.................... {                                                                                              
....................    xuat_1word(0);                             
004A:  CLRF   16
004C:  CLRF   15
004E:  RCALL  0034
....................    xuat_1word(0); 
0050:  CLRF   16
0052:  CLRF   15
0054:  RCALL  0034
....................    xuat_1word(0);                             
0056:  CLRF   16
0058:  CLRF   15
005A:  RCALL  0034
....................    xuat_1word(0);                                    
005C:  CLRF   16
005E:  CLRF   15
0060:  RCALL  0034
....................    
....................    output_high(rck_buzerelay);   
0062:  BCF    F95.3
0064:  BSF    F8C.3
....................    output_low(rck_buzerelay);
0066:  BCF    F95.3
0068:  BCF    F8C.3
....................    
....................    output_high(rck_32led);
006A:  BCF    F95.4
006C:  BSF    F8C.4
....................    output_low(rck_32led); 
006E:  BCF    F95.4
0070:  BCF    F8C.4
....................    
....................    output_high(rck_8ledquet);   
0072:  BCF    F95.5
0074:  BSF    F8C.5
....................    output_low(rck_8ledquet);   
0076:  BCF    F95.5
0078:  BCF    F8C.5
....................                                  
....................    output_high(rck_matranled);          
007A:  BCF    F95.7
007C:  BSF    F8C.7
....................    output_low(rck_matranled);   
007E:  BCF    F95.7
0080:  BCF    F8C.7
....................                            
....................    output_high(rck_lcd20x4);   
0082:  BCF    F95.2
0084:  BSF    F8C.2
....................    output_low(rck_lcd20x4);      
0086:  BCF    F95.2
0088:  BCF    F8C.2
....................                                                                           
....................    xuat_1word(0xffff); 
008A:  SETF   16
008C:  SETF   15
008E:  RCALL  0034
....................    xuat_1word(0xffff); 
0090:  SETF   16
0092:  SETF   15
0094:  RCALL  0034
....................    output_high(rck_4led7doan);       
0096:  BCF    F95.6
0098:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                      
009A:  BCF    F95.6
009C:  BCF    F8C.6
009E:  GOTO   00BA (RETURN)
.................... }             
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 101
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham khoi tao cac port va ic chot
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void set_up_port_ic_chot()
.................... {     
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                   
00A2:  MOVLW  FF
00A4:  MOVWF  F92
00A6:  MOVLW  3C
00A8:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                               
00AA:  MOVLW  F1
00AC:  MOVWF  F94
00AE:  MOVLW  00
00B0:  MOVWF  F96
....................    set_tris_d(0x00);    
00B2:  MOVWF  F95
....................    output_d(0x00); 
00B4:  CLRF   F95
00B6:  CLRF   F8C
....................    xoa_tat_6module();
00B8:  BRA    004A
....................    port_b_pullups(0xff);          
00BA:  BCF    FF1.7
....................    rbdc=0;               
00BC:  CLRF   05
00BE:  CLRF   04
....................             
....................    setup_adc(adc_clock_div_32);        
00C0:  MOVF   FC0,W
00C2:  ANDLW  C0
00C4:  IORLW  02
00C6:  MOVWF  FC0
00C8:  BSF    FC0.7
00CA:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd); 
00CC:  MOVF   FC1,W
00CE:  ANDLW  C0
00D0:  IORLW  0C
00D2:  MOVWF  FC1
....................    output_low(g_all);        
00D4:  BCF    F95.0
00D6:  BCF    F8C.0
00D8:  GOTO   0162 (RETURN)
.................... }
.................... //ham 104
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 4 byte ra 4 led 7 doan
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_4led_7doan_4so(unsigned int bl743,bl742,bl741,bl740)
.................... {     
....................       xuat_1byte(bl740);   xuat_1byte(bl741);
....................       xuat_1byte(bl742);   xuat_1byte(bl743);       
....................       output_low(rck_4led7doan);   
....................       output_high(rck_4led7doan);
.................... 
.................... }
.................... //ham 404
.................... void xuat_4led_7doan_3so(unsigned int bl742,bl741,bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,bl742,bl741,bl740);
.................... }
.................... //ham 403
.................... void xuat_4led_7doan_2so(unsigned int bl741,bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,0xff,bl741,bl740);
.................... }
.................... //ham 402
.................... void xuat_4led_7doan_1so(unsigned int bl740)
.................... {     
....................      xuat_4led_7doan_4so(0xff,0xff,0xff,bl740);
.................... }
.................... 
.................... //ham 405
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi du lieu 16 bit tren 4 led 7 doan
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void  xuat_4led_7doan_giaima_xoa_so0 (unsigned int16 tam)
.................... {         
....................       unsigned int8 ht[4]={0xff,0xff,0xff,0xff},i=0;
....................       do
....................       {
....................           ht[i]= ma7doan[tam%10];
....................           tam/=10;i++;
....................       }
....................       while(tam);
....................       xuat_4led_7doan_4so(ht[3],ht[2],ht[1],ht[0]);
.................... }
.................... 
.................... void  xuat_4led_7doan_2_so (unsigned int8 bh,bl)
.................... {         
....................  xuat_4led_7doan_4so(ma7doan[bh/10],ma7doan[bh%10],ma7doan[bl/10],ma7doan[bl%10]);   
.................... }
.................... 
.................... unsigned int8 lcddata=0; 
.................... unsigned int8 lcdcontrol=0;
.................... unsigned int8 glcddata=0;
.................... unsigned int8 glcdcontrol=0; 
.................... //ham 701
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat du lieu 4 byte ra glcd va lcd
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_glcd_lcd()
.................... {      
....................     xuat_1byte(glcdcontrol);             
....................     xuat_1byte(glcddata);
....................     xuat_1byte(lcdcontrol);       
....................     xuat_1byte(lcddata);      
....................          
....................     output_high(rck_lcd20x4);     
....................     output_low(rck_lcd20x4);
.................... }
.................... //ham 702
.................... void xuat_lcd20x4(unsigned int8 lcd_signal,lcd_ins_hthi)
.................... {     
....................     lcdcontrol = ~lcd_signal;
....................     lcddata    = ~lcd_ins_hthi;      
....................     xuat_glcd_lcd();
.................... }
.................... //ham 703
.................... void xuat_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     glcdcontrol = ~glcd_signal;
....................     glcddata    = ~glcd_ins_hthi;     
....................     xuat_glcd_lcd();
.................... }
.................... //ham 501
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 byte ra dk 1 led quet sang
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_8led_7doan_quet_1(unsigned int ma,so_hthi)
.................... {     
....................       xuat_1byte(~ma);   
....................       xuat_1byte(~so_hthi);
....................       output_high(rck_8ledquet); 
....................       output_low(rck_8ledquet);
.................... }
.................... //ham 502
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat 2 byte ra tat 8 led quet
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_8led_7doan_quet_tat_led()
.................... {
....................    xuat_8led_7doan_quet_1(0xff,0xff);
.................... }
.................... //ham 503
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi led theo thu tu
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned char ttledquet[8]= {0x7f,0xbf,0xdf,0xef,0xf7,0xfb,0xfd,0xfe};
.................... void xuat_8led_7doan_quet_2(unsigned int thutuled,so_hthi)
.................... {         
....................       xuat_1byte(~ (ttledquet[thutuled]));   
....................       xuat_1byte(~so_hthi);     
....................       output_high(rck_8ledquet); 
....................       output_low(rck_8ledquet);
.................... }
.................... //ham 504
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi 8 so tren 8 led quet - co kiem tra
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned char led_7dq[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... unsigned int8 tt8led=0;
.................... void hien_thi_8led_7doan_quet()
.................... {     
....................       for(tt8led=0;tt8led<8;tt8led++)
....................          if (led_7dq[tt8led]!=0xff)
....................          {           
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]);
....................             delay_us(100);
....................             xuat_8led_7doan_quet_tat_led();           
....................             }
.................... }
.................... //ham 505
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con hien thi 8 so tren 8 led quet - khong kiem tra
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void hien_thi_8led_7doan_quet_all()
.................... {     
....................       for(tt8led=0;tt8led<8;tt8led++)         
....................          {           
....................             xuat_8led_7doan_quet_2(tt8led, led_7dq[tt8led]);
....................             delay_us(100);
....................             xuat_8led_7doan_quet_tat_led();           
....................             }
.................... }
.................... 
.................... void delay_quet_8led(unsigned int16 dl)
.................... { 
....................       unsigned int8 i;
....................       for (i=0; i<dl;i++)
....................       hien_thi_8led_7doan_quet_all();
.................... } 
.................... 
.................... void giai_ma_gan_cho_8led_quet_16_xoa(unsigned int16 x)
.................... {     
....................       led_7dq[0]= ma7doan [x %10];    
....................       led_7dq[1]= ma7doan [x/10%10];
....................       led_7dq[2]= ma7doan [x/100%10];    
....................       led_7dq[3]= ma7doan [x/1000%10];
....................       led_7dq[4]= ma7doan [x/10000%10];
....................       if (led_7dq[4]==maso0) 
....................       {
....................             led_7dq[4]=0xff;
....................             if (led_7dq[3]==maso0) 
....................             {
....................                led_7dq[3]=0xff;
....................                if (led_7dq[2]==maso0) 
....................                {
....................                   led_7dq[2]=0xff;
....................                   if (led_7dq[1]==maso0) 
....................                   {
....................                      led_7dq[1]=0xff;
....................                   }
....................                }
....................             }
....................       }
....................             
.................... }
.................... 
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx         
.................... void xuat_2byte(unsigned int16 x)
.................... {
....................    int8 sbb;
....................    #bit bserix  = x.15
....................    for (sbb=0;sbb<16;sbb++)
....................       {                                                 
....................          output_bit(ssdo,bserix);    
....................          output_low(ssck);         
....................          output_high(ssck);
....................          x= x<<1;         
....................      }
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat ra led ma tran
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_matranled(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {      
....................       xuat_2byte(macot3);
....................       xuat_2byte(macot2);
....................       xuat_2byte(macot1);
....................       xuat_2byte(mahang);     
.................... 
....................       output_high(rck_matranled); 
....................       output_low(rck_matranled);
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //chuong trinh con xuat ra led ma tran
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void tat_matranled()
.................... {      
....................       xuat_2byte(0);
....................       xuat_2byte(0);
....................       xuat_2byte(0);
....................       xuat_2byte(0);           
....................       output_high(rck_matranled); output_low(rck_matranled); 
.................... }
.................... unsigned  int8 hieu_chinh_4bit_cao(unsigned int8 xzy)
.................... {
....................       int1  btg;
....................       unsigned int8   bx;   
....................       #bit bit4  = bx.4
....................       #bit bit5  = bx.5
....................       #bit bit6  = bx.6
....................       #bit bit7  = bx.7
....................       bx=xzy;
....................       btg=bit4;   bit4=bit7;  bit7=btg;
....................       btg=bit5;   bit5=bit6;  bit6=btg;      
....................       return(bx);  
.................... }
.................... //ham 601
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //module dieu khien relay,triac, buzzer, dong co, sim
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void xuat_buzzer_relay()
.................... {     
....................    unsigned int8 rbdc1,rbdc2;
....................       rbdc1=rbdc; rbdc2=rbdc>>8;      
....................       xuat_1byte(rbdc2);      
....................       xuat_1byte(rbdc1);
....................       
....................       output_high(rck_buzerelay);   
....................       output_low(rck_buzerelay);
.................... }
.................... //ham 602
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void buzzer_on()
.................... {    
....................       buzzer=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 603
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void buzzer_off()
.................... {     
....................       buzzer=0;
....................       xuat_buzzer_relay();
.................... }
.................... //ham 604
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_on()
.................... {    
....................       relay_1=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 603
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_off()
.................... {    
....................       relay_1=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 604
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_2_on()
.................... {    
....................       relay_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 607
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_2_off()
.................... {    
....................       relay_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 608
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_relay_2_on()
.................... {    
....................       relay_1=1;  relay_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 609
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void relay_1_relay_2_off()
.................... {    
....................       relay_1=0;  relay_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 610
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_1_on()
.................... {    
....................       triac_1=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 611
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_1_off()
.................... {    
....................       triac_1=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 612
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_2_on()
.................... {    
....................       triac_2=1;
....................       xuat_buzzer_relay();         
.................... }
.................... //ham 613
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void triac_2_off()
.................... {    
....................       triac_2=0;
....................       xuat_buzzer_relay();         
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... 
.................... void ggmmaa()
.................... {
....................    unsigned int8   x;   
....................    x=ma7doan[1];
.................... }
.................... #endif
....................  
.................... 
.................... unsigned int8 y,i;
.................... void main()
*
0124:  CLRF   FF8
0126:  BCF    FD0.7
0128:  BSF    FB8.3
012A:  MOVLW  08
012C:  MOVWF  FAF
012E:  MOVLW  02
0130:  MOVWF  FB0
0132:  MOVLW  A6
0134:  MOVWF  FAC
0136:  MOVLW  90
0138:  MOVWF  FAB
013A:  CLRF   06
013C:  CLRF   07
013E:  CLRF   08
0140:  CLRF   09
0142:  CLRF   12
0144:  MOVF   FC1,W
0146:  ANDLW  C0
0148:  IORLW  0F
014A:  MOVWF  FC1
014C:  MOVLW  07
014E:  MOVWF  FB4
0150:  SETF   0A
0152:  SETF   0B
0154:  SETF   0C
0156:  SETF   0D
0158:  SETF   0E
015A:  SETF   0F
015C:  SETF   10
015E:  SETF   11
.................... {
.................... set_up_port_ic_chot();
0160:  BRA    00A2
....................  y=0;
0162:  CLRF   13
....................  while(true)
....................  {
....................  
....................          for(i=0;i<8;i++)
0164:  CLRF   14
0166:  MOVF   14,W
0168:  SUBLW  07
016A:  BNC   018A
....................           { 
....................           xuat_32led_don_4byte(0,0,0,y);
016C:  CLRF   15
016E:  CLRF   16
0170:  CLRF   17
0172:  MOVFF  13,18
0176:  RCALL  00DC
....................           delay_ms(200);
0178:  MOVLW  C8
017A:  MOVWF  15
017C:  RCALL  00FE
....................           y= (y<<1)+1;
017E:  BCF    FD8.0
0180:  RLCF   13,W
0182:  ADDLW  01
0184:  MOVWF  13
0186:  INCF   14,F
0188:  BRA    0166
....................           }
....................           for(i=0;i<8;i++)
018A:  CLRF   14
018C:  MOVF   14,W
018E:  SUBLW  07
0190:  BNC   01AC
....................           { 
....................           xuat_32led_don_4byte(0,0,0,y);
0192:  CLRF   15
0194:  CLRF   16
0196:  CLRF   17
0198:  MOVFF  13,18
019C:  RCALL  00DC
....................           delay_ms(200); 
019E:  MOVLW  C8
01A0:  MOVWF  15
01A2:  RCALL  00FE
....................           y= (y<<1);
01A4:  BCF    FD8.0
01A6:  RLCF   13,F
01A8:  INCF   14,F
01AA:  BRA    018C
....................           }
01AC:  BRA    0164
....................  }
.................... }
.................... 
01AE:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
